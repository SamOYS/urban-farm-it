<section
  id="InstructionsFilter"
  data-section-id="{{ section.id }}"
  class="instructions-filter-section"
>
  <div class="container page-width page-width--narrow">
    {% liquid
      if template.name == 'page'
        assign product_instructions = page.metafields.product.instructions.value 
      elsif template.name == 'article'
        assign product_instructions = article.metafields.product.instructions.value 
      endif
      assign default_lang = 'english'
      assign default_product = 'lions-mane'
      assign languages = section.settings.languages | split: ','
      assign products = product_instructions | map: 'custom_id' | uniq
    %}
    <div class="instructions-filter">
      <div class="filter-group">
        <label for="product-filter">Product:</label>
        <div class="custom-select">
          <select id="product-filter">
            {% for product in products %}
              <option value="{{ product }}" {% if product == default_product %}selected{% endif %}>
                {{ product | replace: '-', ' ' | capitalize }}
              </option>
            {% endfor %}
          </select>
        </div>
      </div>
      <div class="filter-group">
        <label for="language-filter">Language:</label>
        <div class="custom-select">
          <select id="language-filter">
            {% for language in languages %}
              <option value="{{ language }}" {% if language == default_lang %}selected{% endif %}>
                {{ language }}
              </option>
            {% endfor %}
          </select>
        </div>
      </div>
    </div>
    <div class="instructions-content-wrapper">
      <div class="loading-spinner" style="display: none;">Loading...</div>
      <div class="instructions-content">
        {% for instructions in product_instructions %}
          {% if instructions.custom_id == default_product %}
            {{ instructions[default_lang] | metafield_tag }}
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
  <script type="application/json" id="instructions-data">
    {
      {% for instructions in product_instructions %}
        "{{ instructions.custom_id }}": {
          {% for language in languages %}
            "{{ language }}": "{{ instructions[language] | metafield_tag | escape | strip_newlines }}"{% unless forloop.last %},{% endunless %}
          {% endfor %}
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    }
  </script>
</section>

{% javascript %}
(() => {
  const languageMap = {
    'english': 'English',
    'french': 'Français',
    'german': 'Deutsch',
    'spanish': 'Español',
  };

  const fallbackMessages = {
    'english': 'Instructions not available for this combination.',
    'french': 'Instructions non disponibles pour cette combinaison.',
    'german': 'Anweisungen für diese Kombination nicht verfügbar.',
    'spanish': 'Instrucciones no disponibles para esta combinación.'
  };

  const unescapeHTML = (escapedHTML) => {
    const doc = new DOMParser().parseFromString(escapedHTML, 'text/html');
    return doc.documentElement.textContent;
  };

  const updateInstructions = (instructionsData, elements) => {
    const { languageFilter, productFilter, instructionsContent, loadingSpinner } = elements;
    const selectedLanguage = languageFilter.value;
    const selectedProduct = productFilter.value;
    
    loadingSpinner.style.display = 'block';
    instructionsContent.style.opacity = '0.5';
    
    setTimeout(() => {
      const selectedInstructions = instructionsData[selectedProduct];
      
      instructionsContent.innerHTML = selectedInstructions && selectedInstructions[selectedLanguage]
        ? unescapeHTML(selectedInstructions[selectedLanguage])
        : `<p>${fallbackMessages[selectedLanguage] || fallbackMessages['english']}</p>`;
      
      loadingSpinner.style.display = 'none';
      instructionsContent.style.opacity = '1';
    }, 300);
  };

  const updateLanguageOptions = (instructionsData, languageFilter) => {
    const selectedProduct = document.getElementById('product-filter').value;
    const availableLanguages = instructionsData[selectedProduct];

    Array.from(languageFilter.options).forEach(option => {
      const languageKey = option.value;
      option.disabled = !availableLanguages[languageKey];
      option.textContent = languageMap[languageKey] || languageKey;
    });
  };

  const getUrlParams = () => {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      product: urlParams.get('product'),
      language: urlParams.get('language')
    };
  };

  const setFilterFromParams = (instructionsData, elements) => {
    const { product, language } = getUrlParams();
    const { productFilter, languageFilter } = elements;

    if (product && instructionsData[product]) {
      productFilter.value = product;
    }

    if (language && languageFilter.querySelector(`option[value="${language}"]`)) {
      languageFilter.value = language;
    }
  };

  const updateUrlParams = (product, language) => {
    const url = new URL(window.location);
    url.searchParams.set('product', product);
    url.searchParams.set('language', language);
    window.history.replaceState({}, '', url);
  };

  const setStickyFilterPosition = () => {
    const siteHeader = document.getElementById('SiteHeader');
    const filter = document.querySelector('.instructions-filter');
    if (siteHeader && filter) {
      const headerHeight = siteHeader.offsetHeight;
      filter.style.top = `${headerHeight}px`;
    }
  };

  const initialiseFilter = () => {
    const elements = {
      languageFilter: document.getElementById('language-filter'),
      productFilter: document.getElementById('product-filter'),
      instructionsContent: document.querySelector('.instructions-content'),
      loadingSpinner: document.querySelector('.loading-spinner')
    };

    const instructionsData = JSON.parse(document.getElementById('instructions-data').textContent);

    const update = () => {
      updateLanguageOptions(instructionsData, elements.languageFilter);
      updateInstructions(instructionsData, elements);
      updateUrlParams(elements.productFilter.value, elements.languageFilter.value);
    };

    elements.languageFilter.addEventListener('change', update);
    elements.productFilter.addEventListener('change', update);

    // Initialize custom select styling
    document.querySelectorAll('.custom-select select').forEach(select => {
      select.addEventListener('change', function() {
        this.parentElement.dataset.value = this.value;
      });
      select.parentElement.dataset.value = select.value;
    });

    // Set filters based on URL parameters
    setFilterFromParams(instructionsData, elements);

    // Set initial sticky filter position
    setStickyFilterPosition();

    // Update sticky filter position on window resize
    window.addEventListener('resize', setStickyFilterPosition);

    // Initial update
    update();
  };

  // Run initialisation when DOM is fully loaded
  document.addEventListener('DOMContentLoaded', initialiseFilter);
})();
{% endjavascript %}

{% style %}
[data-section-id="{{ section.id }}"] h1 {
  font-size: clamp(32px, 5vw, 35px)
}

[data-section-id="{{ section.id }}"] h1, 
[data-section-id="{{ section.id }}"] h2,
[data-section-id="{{ section.id }}"] h3,
[data-section-id="{{ section.id }}"] h4 {
  font-family: "DM Sans" !important;
  font-weight: unset !important;
  letter-spacing: unset !important;
  text-transform: unset !important;
}
  
[data-section-id="{{ section.id }}"] {
  padding: 2.5rem 0;
}

.instructions-filter-section {
  font-family: "DM Sans", -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
}

.instructions-filter {
  display: flex;
  flex-wrap: nowrap;
  gap: 1rem;
  margin-bottom: 2rem;
  position: sticky;
  top: 0;
  z-index: 9;
  background: #c2c1c124;
  width: 100%;
  padding: 1rem;
  -webkit-backdrop-filter: blur(8px);
  backdrop-filter: blur(8px);
  border-radius: var(--buttonRadius);
  transition: top 0.3s ease;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.filter-group {
  flex: 1;
  min-width: 0;
}

.filter-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.custom-select {
  position: relative;
  display: block;
  width: 100%;
}

.custom-select select {
  display: block;
  width: 100%;
  padding: 0.75rem 2.5rem 0.75rem 1rem;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 4px;
  appearance: none;
  font-size: 1rem;
  color: #333;
  cursor: pointer;
}

.custom-select select option:disabled {
  color: #999;
}

.custom-select::after {
  content: '\25BC';
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  pointer-events: none;
}

.instructions-content-wrapper {
  position: relative;
  background: #f9f9f9;
  padding: 2rem;
  border-radius: var(--buttonRadius);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(255,255,255,0.8);
  padding: 1rem;
  border-radius: 4px;
}

.instructions-content {
  transition: opacity 0.3s ease;
}

@media (max-width: 768px) {
  .instructions-filter {
    flex-direction: row;
    align-items: flex-end;
  }
  
  .filter-group {
    width: 50%;
  }

  .filter-group label {
    font-size: 0.9rem;
  }

  .custom-select select {
    padding: 0.5rem 2rem 0.5rem 0.5rem;
    font-size: 0.9rem;
  }

  .custom-select::after {
    right: 0.5rem;
  }
}
{% endstyle %}

{% schema %}
{
  "name": "Instructions Filter",
  "settings": [
    {
      "type": "text",
      "id": "languages",
      "label": "Available Languages",
      "default": "english,french,german,spanish",
      "info": "Comma-separated list of available languages"
    }
  ],
  "presets": [
    {
      "name": "Instructions Filter",
      "category": "Product Instructions"
    }
  ]
}
{% endschema %}